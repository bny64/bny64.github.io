{"meta":{"title":"bny-blog","subtitle":"Paolo world","description":"","author":"Nam Yul Bae","url":"https://bny64.github.io","root":"/"},"pages":[],"posts":[{"title":"What is RTSP?","slug":"rtsp-en","date":"2020-11-24T23:52:22.000Z","updated":"2020-11-24T23:52:24.000Z","comments":true,"path":"2020/11/25/rtsp-en/","link":"","permalink":"https://bny64.github.io/2020/11/25/rtsp-en/","excerpt":"","text":"RTSP (real time streaming protocol) is a protocol for controlling real-time multimedia streams.RealNetwork, Netscape, and IBM co-developed. RTSP Features Infrastructure for Multi-Point Streaming Applications○ RTSP has the purpose of providing protocols for multimedia stream control in multi-branch applications that use both unicast or multicast connectivity in the application layer, but it can be seen as infrastructure rather than protocol. Operates by client/server form○ Structure, grammar, and operation are very similar to HTTP. Session management○ The setting and control of multiple multimedia sessions is controlled by RTSP.○ Resource management setup and reservation of RTSP can be used with RSVP. Several protocols are involved○ The real-time transmission mechanism of real multimedia information is based on RTP/RTCP. RTP/RTCP Generates and controls time-synchronized streams in audio, video, etc. ○ Works on a variety of transport protocols, including reliable TCP and unreliable UDP Mainly operating on UDP RTSP (RTCP) real-time packets are delivered with the help of these protocols.○ Use a different channel than RTP,RTCP (use 554 times as a different port number than the data transfer port) RTP,RTCP is transmitted over the same channel. RSTP performs full streaming control using channels different from RTP/RTCP. Control commands associated with streaming playbackㅇ Setup, Play, Forward, Rewind, Pause, Stop, Rescue, Record, TEARDOWN, etc. - This is a home VCR applied to the Internet. ㅇ Examples of implementations by the Internet Web 차재복 (Cha Jae Bok)www.ktword.co.kr/abbr_view.php?m_temp1=1798","categories":[{"name":"ENGLISH","slug":"ENGLISH","permalink":"https://bny64.github.io/categories/ENGLISH/"},{"name":"STUDY","slug":"ENGLISH/STUDY","permalink":"https://bny64.github.io/categories/ENGLISH/STUDY/"},{"name":"NEW TECHNOLOGY","slug":"ENGLISH/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/ENGLISH/STUDY/NEW-TECHNOLOGY/"}],"tags":[{"name":"RTSP, realtime streaming protocol","slug":"RTSP-realtime-streaming-protocol","permalink":"https://bny64.github.io/tags/RTSP-realtime-streaming-protocol/"}]},{"title":"What is ONVIF?","slug":"ONVIF-en","date":"2020-11-24T04:13:33.000Z","updated":"2020-11-24T04:16:38.000Z","comments":true,"path":"2020/11/24/ONVIF-en/","link":"","permalink":"https://bny64.github.io/2020/11/24/ONVIF-en/","excerpt":"","text":"ONVIF(The Open Network Video Interface Forum) is one of the World Open Industrial Forum (*), designed to facilitate the development and use of world open standards for interfaces of physical IP-based products for security purposes. ONVIF sets standards for how IP products within video surveillance and other physical security zones can communicate with each other. ONVIF is an organization founded by Axis Communications, Bosch Security Systems and Sony in 2008.To put it simply, it is an international standard protocol used to control cameras, and more specifically, it is a standard protocol used in security devices such as CCTVs, cameras, and viewers. ProfilesProfile SCommon features of IP video systems such as video and audio streaming, PTZ options, and relay activation are mentioned.Profile CExplain the state of the door and the common functions of the IP access control system such as control, qualification management and event management management.Profile GDescribe video storage, recording, and search.Profile QDescribes device discovery, configuration, and TLS authentication management.Profile AA function constitutes PACS (physical access control system) related items such as access rules, qualification information, and schedules by retrieving information, states, and events.Profile T(Candidate Release RC) Supports video streaming functions such as H.264, H.265 encoding format, imaging settings, and alarm events (motion, unjust change detection, etc.. UsageIt is a protocol that connects security equipment each other. Generally, security and video equipment support a variety of protocols, Normally the equipments use our own standard protocol and the International Standard Protocol (ONVIF).In the case of the International Standard Protocol (ONVIF), since it does not support functions specific to the relevant device, it may use its own standard protocol.When using ONVIF, new specifications and changes are difficult and time-consuming because they are a universal protocol. However, because it is a world standard, it can be used anywhere in the world. Generally, there are socket-based protocols and HTTP-based protocols, but ONVIF uses the HTTP protocol. Features Protocol Type Video, audio, and event sending RTP/RTSP protocol Control, Settings, Queries WSDL, SOAP Protocol We use view video using RTP/RTSP, and use WSDL, SOAP to modify IP or settings.An ONVIF protocol does not embody the RTP/RTSP protocol, but serves to inform the RTP/RTSP address so that equipment such as a camera can be used. * If there are any expressions or words that do not fit this post, please contact us by comment or email. I will correct it immediately.","categories":[{"name":"ENGLISH","slug":"ENGLISH","permalink":"https://bny64.github.io/categories/ENGLISH/"},{"name":"STUDY","slug":"ENGLISH/STUDY","permalink":"https://bny64.github.io/categories/ENGLISH/STUDY/"},{"name":"NEW TECHNOLOGY","slug":"ENGLISH/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/ENGLISH/STUDY/NEW-TECHNOLOGY/"}],"tags":[{"name":"ONVIF","slug":"ONVIF","permalink":"https://bny64.github.io/tags/ONVIF/"},{"name":"RTP","slug":"RTP","permalink":"https://bny64.github.io/tags/RTP/"},{"name":"RTSP","slug":"RTSP","permalink":"https://bny64.github.io/tags/RTSP/"}]},{"title":"hexo 検索エンジン最適化","slug":"seo-jp","date":"2020-11-21T12:44:41.000Z","updated":"2020-11-21T12:44:42.000Z","comments":true,"path":"2020/11/21/seo-jp/","link":"","permalink":"https://bny64.github.io/2020/11/21/seo-jp/","excerpt":"","text":"HEXO - 検索エンジン最適化(SEO)私のブログが色んな検索サイトから検索できるようにするためには？ ブログを作成した後、自分のブログが検索エンジンに露出されるようにするためには最適化作業を行わなければなりません。 検索エンジン最適化(SEO)に必要なプラグインインストール hexo-auto-canonical hexo-generator-robotstxt hexo-autonofollow hexo-generator-feed hexo-generator-seo-friendly-sitemap 1. hexo-auto-canonical代表URL(標準リンク)を自動的に生成してくれるプラグインです。 1npm install --save hexo-auto-canonical 上記のようにgitでモジュールをインストールします。インストール後、ブログの経路（メインディレクトリ基準）でthemes &gt; hueman &gt; layout &gt; common &gt; head.ejsファイル内に&lt;%- meta(page) %の下に以下のコードを入れます。 12345&#x2F;&#x2F;.ejs&lt;%-autoCanonical(config, page)%&gt;&#x2F;&#x2F;.jade| !&#123; autoCanonical(config, page)&#125; 入れると以下のコードになります。 12&lt;%-meta(page) %&gt;&lt;%-autoCanonical(config, page)%&gt; 2. hexo-generator-robotstxt自動でrobot.txtファイルを生成してくれるプラグインです。 1npm install hexo-generator-robotstxt --save 上記のようにgitでモジュールをインストールします。インストール後のブログディレクトリの_config.yml（テーマ_config.ymlではありません）ファイルを開いて下記のように入力してください。 12345robotstxt: useragent:&quot;*&quot; allow: - &#x2F; sitemap:https:&#x2F;&#x2F;username.github.io&#x2F;sitemap.xml 3. hexo-autonofollow外部リンクにrel=&quot;external nofollow&quot;プロパティを自動的に追加してくれる機能をするプラグインです。 1npm install hexo-autonofollow --save 上記のようにgitでモジュールをインストールします。インストール後のブログディレクトリの_config.yml（テーマ_config.ymlではありません）ファイルを開いて下記のように入力してください。 12345nofollow: enable:true &#x2F;&#x2F;プラグイン活性化可否 exclude: &#x2F;&#x2F;除外させるhost - guest1.com - guest2.com 4. hexo-generator-feed自動的に RSS feedを生成してくれるプラグインです。 1npm install hexo-generator-feed-save 上記のようにgitでモジュールをインストールします。インストール後のブログディレクトリの_config.yml（テーマ_config.ymlではありません）ファイルを開いて下記のように入力してください。 1234feed: type:rss2 &#x2F;&#x2F;feedの種類(atom&#x2F;rss2) rss2おすすめします。 path:rss2.xml &#x2F;&#x2F;feedが生成される経路 limit:20 &#x2F;&#x2F;最新ポスト数設定（0またはfalseは全ポスト） 5. hexo-generator-seo-friendly-sitemapクローラがブログをより効率的にクロリングできるようにサイトマップxmlファイルを自動で生々しく描いてくれます。 1npm install hexo-generator-seo-friendly-sitemap --save 上記のようにgitでモジュールをインストールします。インストール後のブログディレクトリの_config.yml（テーマ_config.ymlではありません）ファイルを開いて下記のように入力してください。 1234sitemap: path:sitemap.xml &#x2F;&#x2F; sitemapが生成される経路 tag:false &#x2F;&#x2F; sitemapにtagを含むかどうか category:false &#x2F;&#x2F; sitemapにcategoryが含まれているかどうか すべて追加すると、_config.ymlは以下のように作成されるようになります。 1234567891011121314151617181920212223242526272829...# URL##If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;example.com&#x2F;child&#39; and root as&#39;&#x2F;child&#x2F;&#39;url:https:&#x2F;&#x2F;username.github.io&#x2F;url:https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.ioこのように入力するとrss2.xmlからファイル経路を正しく読み込めないので注意！...# Deployment＃＃Docs:https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy: type:git repo:https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io # ギットハブページが保存されたリポジトリアドレス branch:mainnofollow: enable:truefeed: type:rss2 path:rss2.xml limit:20#sitemap auto generator sitemap: path:sitemap.xml tag:false category:falserobotstxt: useragent:&quot;*&quot; allow: - &#x2F; sitemap:https:&#x2F;username.github.io&#x2F;sitemap.xml * もしこのポストに合わない表現や単語がありましたらコメントもしくはメールにて連絡ください。 直ちに修正するようにします。","categories":[{"name":"JAPANESE","slug":"JAPANESE","permalink":"https://bny64.github.io/categories/JAPANESE/"},{"name":"STUDY","slug":"JAPANESE/STUDY","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/"},{"name":"BLOG","slug":"JAPANESE/STUDY/BLOG","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/BLOG/"}],"tags":[{"name":"seo","slug":"seo","permalink":"https://bny64.github.io/tags/seo/"},{"name":"SEO","slug":"SEO","permalink":"https://bny64.github.io/tags/SEO/"},{"name":"hexo","slug":"hexo","permalink":"https://bny64.github.io/tags/hexo/"},{"name":"検索エンジン最適化","slug":"検索エンジン最適化","permalink":"https://bny64.github.io/tags/%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E6%9C%80%E9%81%A9%E5%8C%96/"},{"name":"hexo検索エンジン最適化","slug":"hexo検索エンジン最適化","permalink":"https://bny64.github.io/tags/hexo%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E6%9C%80%E9%81%A9%E5%8C%96/"}]},{"title":"RTSPとは?","slug":"rtsp-jp","date":"2020-11-20T00:11:13.000Z","updated":"2020-11-20T00:11:14.000Z","comments":true,"path":"2020/11/20/rtsp-jp/","link":"","permalink":"https://bny64.github.io/2020/11/20/rtsp-jp/","excerpt":"","text":"RTSP(real time streaming protocol) はリアルタイムマルチメディアストリームを制御するためのプロトコルである。RealNetwork社、Netscape社、IBM社などが共同開発を行った。 RTSPの特徴 多地点ストリーミング応用のための基盤構造 応用階層でユニキャストまたはマルチキャスト接続の両方を使用する多地点応用で、マルチメディアストリーム制御のためのプロトコル提供という目的を持つが、プロトコルというより基盤構造と見ることができる。 クライアント/サーバーの形で動作 構造、文法、動作方式がHTTPと非常に似ている。 セッション管理 多地点多数のマルチメディアセッションの設定と制御がRTSPによって制御される。 RTSPのリソース管理セットアップ及び予約はRSVPで使用可能 複数のプロトコルが関連する 実際のマルチメディア情報のリアルタイム転送メカニズムは、RTP/RTCPに基本基本としている。 RTPRTCP:オーディオ、ビデオなどで時間同期化されたストリームを生成·制御する。 信頼性のないTCP、非信頼的なUDPなど、様々な伝送プロトコルの上で動作可能。主にUDP上で動作 このようなプロトコルの助けを受けてRTSP/RTP(RTCP)リアルタイムパケットが配信される。 RTP、RTCPとは異なるチャンネルを使用（データ転送ポートとは異なるポート番号として554番を使用） RTP、RTCPは同一チャンネルを通じて転送されますが、 RSTPは、RTPRTCPとは異なるチャネルを使用して全体ストリーミング制御を行う。 ストリーミング再生に関する制御コマンドㅇ Setup(接続設定)、Play(再生)、Forward、Rewind、Pause(一時停止)、Stop(完全停止)、Resume(再起動)、Record、Teardown(接続解除)など、 - 家庭用VCRをインターネットに適用したもの インターネットウェブによる実装例 차재복 (Cha Jae Bok)www.ktword.co.kr/abbr_view.php?m_temp1=1798 * もしこのポストに合わない表現や単語がありましたらコメントもしくはメールにて連絡ください。 直ちに修正するようにします。","categories":[{"name":"JAPANESE","slug":"JAPANESE","permalink":"https://bny64.github.io/categories/JAPANESE/"},{"name":"STUDY","slug":"JAPANESE/STUDY","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/"},{"name":"NEW TECHNOLOGY","slug":"JAPANESE/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/NEW-TECHNOLOGY/"}],"tags":[{"name":"RTSP, realtime streaming protocol","slug":"RTSP-realtime-streaming-protocol","permalink":"https://bny64.github.io/tags/RTSP-realtime-streaming-protocol/"}]},{"title":"ONVIFとは？","slug":"ONVIF-jp","date":"2020-11-18T15:00:00.000Z","updated":"2020-11-19T08:30:40.000Z","comments":true,"path":"2020/11/19/ONVIF-jp/","link":"","permalink":"https://bny64.github.io/2020/11/19/ONVIF-jp/","excerpt":"","text":"ONVIF（Open Network Video Interface Forum オープンネットワークビデオインターフェースフォーラム[*]、オンビーフ）は、世界開放型産業フォーラムの一つであり、セキュリティ目的の物理的なIP ベース製品のインターフェースのための世界開放型標準の開発及び利用を容易にすることを目的とする。 ONVIF は動画監視その他の物理的な防犯地域内のIP 製品がどのように相互に通信できるかについての標準を作る。 ONVIFは2008年アクシスコミュニケーションズ、ボッシュセキュリティシステムズ、ソニーが立ち上げた団体である。簡単に言えばカメラを制御する際に使われる国際標準プロトコルであり、詳しく言えばセキュリティ機器（CCTV、カメラ、ビューアーなど）で使われる標準プロトコルである。 プロファイルプロファイルSビデオやオーディオストリーミング、PTZオプション、リレーアクティベーションなどのIPビデオシステムの共通機能に言及する。プロファイルCドアの状態及び制御、資格管理、イベント管理などのIPアクセス制御システムの共通機能を説明する。プロファイルGビデオストレージ、録画、検索を説明する。プロファイルQデバイス発見、構成、TLS 認証の管理について説明する。プロファイルA情報、状態、イベントの検索を行い、アクセス規則、資格情報、スケジュール等のPACS（物理アクセス制御システム）関連項目を構成する機能である。プロファイルT（発売候補RC）H.264、H.265エンコードフォーマット、イメージング設定、アラームイベント（モーション、不当変更検知など）などのビデオストリーミング機能をサポートする。 用途セキュリティ装備同士を互いに接続して動作させるプロトコルである。 一般的にセキュリティ装備、映像装備は様々なプロトコルをサポートしているが、自社標準プロトコルと国際標準プロトコル(ONVIF)を使用する。国際標準プロトコル(ONVIF)の場合、該当装置のみに特化している機能をサポートしないため、自社標準プロトコルを使用する場合もある。ONVIF を使用する場合、全世界共通で使用するプロトコルであるため、新しい仕様や変更される作業は難しく時間がかかる。 しかし、世界標準であるため、世界のどこでも使うことができる。 一般的にプロトコルはsocket 通信基盤プロトコルとHTTP ベースプロトコルがあるが、ONVIF はHTTP プロトコルを使用する。 機能 プロトコルの種類 映像、音声、イベント送受信 RTPRTSPプロトコル 制御、設定、照会 WSDL、SOAPプロトコル 映像を見るときはRTPRTSPを使用し、IPを変更したり、設定を変更したりするときにはWSDL、SOAPを使用するONVIFプロトコルがRTPRTSPプロトコルを具現したのではなく、カメラのような装備を使用できるようにRTPRTSPアドレスを知らせる役割をする。 * もしこのポストに合わない表現や単語がありましたらコメントもしくはメールにて連絡ください。 直ちに修正するようにします。","categories":[{"name":"JAPANESE","slug":"JAPANESE","permalink":"https://bny64.github.io/categories/JAPANESE/"},{"name":"STUDY","slug":"JAPANESE/STUDY","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/"},{"name":"NEW TECHNOLOGY","slug":"JAPANESE/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/NEW-TECHNOLOGY/"}],"tags":[{"name":"ONVIF","slug":"ONVIF","permalink":"https://bny64.github.io/tags/ONVIF/"},{"name":"RTP","slug":"RTP","permalink":"https://bny64.github.io/tags/RTP/"},{"name":"RTSP","slug":"RTSP","permalink":"https://bny64.github.io/tags/RTSP/"}]},{"title":"hexo 검색엔진 최적화","slug":"seo","date":"2020-11-18T06:49:53.000Z","updated":"2020-11-19T08:20:32.000Z","comments":true,"path":"2020/11/18/seo/","link":"","permalink":"https://bny64.github.io/2020/11/18/seo/","excerpt":"","text":"HEXO - 검색 엔진 최적화(SEO)내 블로그가 다양한 검색사이트에거 검색이 되게 하려면?? 블로그를 생성한 후에 자신의 블로그가 검색엔진에 노출되게 하려면 최적화 작업을 진행해줘야 합니다. 검색엔진 최적화(SEO)에 필요한 플러그인 설치 hexo-auto-canonical hexo-generator-robotstxt hexo-autonofollow hexo-generator-feed hexo-generator-seo-friendly-sitemap 1. hexo-auto-canonical대표 URL(표준 링크)을 자동으로 생성해주는 플러그인입니다. 1npm install --save hexo-auto-canonical 위와 같이 git을 통하여 모듈을 설치합니다.설치 후 블로그의 경로(메인 디렉토리 기준)에서 themes &gt; hueman &gt; layout &gt; common &gt; head.ejs 파일 내에 &lt;%- meta(page) %&gt; 아래에 아래의 코드를 넣어줍니다. 12345&#x2F;&#x2F;.ejs&lt;%- autoCanonical(config, page) %&gt;&#x2F;&#x2F;.jade| !&#123; autoCanonical(config, page) &#125; 삽입하게 되면 아래와 같은 코드가 됩니다. 12&lt;%- meta(page) %&gt;&lt;%- autoCanonical(config, page) %&gt; 2. hexo-generator-robotstxt자동으로 robot.txt 파일을 생성해주는 플러그인 입니다. 1npm install hexo-generator-robotstxt --save 위와 같이 git을 통하여 모듈을 설치합니다.설치 후 블로그 디렉토리의 _config.yml(테마 _config.yml 아닙니다.) 파일을 열어 아래와 같이 입력해줍니다. 12345robotstxt: useragent: &quot;*&quot; allow: - &#x2F; sitemap: https:&#x2F;&#x2F;username.github.io&#x2F;sitemap.xml 3. hexo-autonofollow외부 링크에 rel=&quot;external nofollow 속성을 자동으로 추가해주는 기능을 하는 플러그인입니다. 1npm install hexo-autonofollow --save 위와 같이 git을 통하여 모듈을 설치합니다.설치 후 블로그 디렉토리의 _config.yml(테마 _config.yml 아닙니다.) 파일을 열어 아래와 같이 입력해줍니다. 12345nofollow: enable: true &#x2F;&#x2F;플러그인 활성화 여부 exclude: &#x2F;&#x2F;제외시킬 host - guest1.com - guest2.com 4. hexo-generator-feed자동으로 RSS feed를 생성해주는 플러그인 입니다. 1npm install hexo-generator-feed --save 위와 같이 git을 통하여 모듈을 설치합니다.설치 후 블로그 디렉토리의 _config.yml(테마 _config.yml 아닙니다.) 파일을 열어 아래와 같이 입력해줍니다. 1234feed: type: rss2 &#x2F;&#x2F;feed의 종류(atom&#x2F;rss2) *네이버는 atom를 지원하지 않기 때문에 rss2 추천 path: rss2.xml &#x2F;&#x2F;feed가 생성될 경로 limit: 20 &#x2F;&#x2F;최신 포스트 갯수 설정(0 또는 false는 전체 포스트) 5. hexo-generator-seo-friendly-sitemap크롤러가 블로그를 더욱 효율적으로 클롤링 할 수 있도록 사이트맵 xml 파일을 자동으로 생생해 줍니다. 1npm install hexo-generator-seo-friendly-sitemap --save 위와 같이 git을 통하여 모듈을 설치합니다.설치 후 블로그 디렉토리의 _config.yml(테마 _config.yml 아닙니다.) 파일을 열어 아래와 같이 입력해줍니다. 1234sitemap: path: sitemap.xml &#x2F;&#x2F;sitemap이 생성될 경로 tag: false &#x2F;&#x2F;sitemap에 tag 포함 여부 category: false &#x2F;&#x2F;sitemap에 category 포함 여부 모두 추가하게 되면 _config.yml는 아래와 같이 작성되게 됩니다. 1234567891011121314151617181920212223242526272829...# URL## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;example.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: https:&#x2F;&#x2F;username.github.io&#x2F;&#x2F;url : https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io &#x3D;&gt; 이렇게(블로그 주소가 아니라 repository 주소) 입력하게 되면 rss2.xml에서 파일 경로를 제대로 읽어오지 못하기 때문에 주의!...# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io # 깃허브 페이지가 저장된 리포지토리 주소 branch: mainnofollow: enable: truefeed: type: rss2 path: rss2.xml limit: 20#sitemap auto generatorsitemap: path: sitemap.xml tag: false category: falserobotstxt: useragent: &quot;*&quot; allow: - &#x2F; sitemap: https:&#x2F;&#x2F;username.github.io&#x2F;sitemap.xml","categories":[{"name":"KOREAN","slug":"KOREAN","permalink":"https://bny64.github.io/categories/KOREAN/"},{"name":"STUDY","slug":"KOREAN/STUDY","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/"},{"name":"BLOG","slug":"KOREAN/STUDY/BLOG","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/BLOG/"}],"tags":[{"name":"seo","slug":"seo","permalink":"https://bny64.github.io/tags/seo/"},{"name":"SEO","slug":"SEO","permalink":"https://bny64.github.io/tags/SEO/"},{"name":"hexo","slug":"hexo","permalink":"https://bny64.github.io/tags/hexo/"},{"name":"검색엔진최적화","slug":"검색엔진최적화","permalink":"https://bny64.github.io/tags/%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%B5%9C%EC%A0%81%ED%99%94/"},{"name":"hexo 검색엔진 최적화","slug":"hexo-검색엔진-최적화","permalink":"https://bny64.github.io/tags/hexo-%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84-%EC%B5%9C%EC%A0%81%ED%99%94/"}]},{"title":"RTSP란?","slug":"rtsp","date":"2020-11-17T07:28:29.000Z","updated":"2020-11-24T04:45:36.000Z","comments":true,"path":"2020/11/17/rtsp/","link":"","permalink":"https://bny64.github.io/2020/11/17/rtsp/","excerpt":"","text":"RTSP(real time streaming protocol) 는 실시간 멀티미디어 스트림을 제어하기 위한 프로토콜이다.RealNetwork사, Netscape사, IBM사 등이 공동개발을 하였다. RTSP의 특징 다지점 스트리밍 응용을 위한 기반구조 응용계층에서 유니캐스트 또는 멀티캐스트 연결 모두를 사용하는 다지점 응용에서, 멀티미디어 스트림 제어를 위한 프로토콜 제공이라는 목적을 가지나, 프로토콜이라기 보다는 기반구조라고 볼 수 있음 클라이언트/서버 형태로 동작 구조,문법,동작방식이 HTTP 와 매우 유사 세션 관리 다지점 다수개의 멀티미디어 세션의 설정과 제어가 RTSP에 의하여 제어됨 RTSP의 자원 관리 셋업 및 예약은 RSVP를 가지고 사용 가능 여러 프로토콜들이 관련됨 실제 멀티미디어 정보의 실시간 전송 매커니즘은 RTP/RTCP에 기본을 두고 있음 RTP/RTCP : 오디오,비디오 등에서 시간 동기화된 스트림을 생성 및 제어함 신뢰적인 TCP, 비신뢰적인 UDP 등 다양한 전송 프로토콜 위에서 동작 가능 주로 UDP 위에서 동작 이러한 프로토콜의 도움을 받아 RTSP/RTP(RTCP) 실시간 패킷이 전달됨 RTP,RTCP와는 다른 채널 사용 (데이터 전송 포트와 다른 포트번호로써 554번 사용) RTP,RTCP는 동일 채널을 통해 전송된다. RSTP는 RTP/RTCP와 다른 채널을 사용하여 전체 스트리밍 제어를 수행함 스트리밍 재생과 관련된 제어 명령어ㅇ Setup(연결설정), Play(재생), Forward, Rewind, Pause(일시멈춤), Stop(완전정지), Resume(다시시작), Record, Teardown(연결해제) 등 - 가정용 VCR을 인터넷에 적용한 것임 ㅇ 인터넷 웹에 의한 구현 例 차재복 (Cha Jae Bok)www.ktword.co.kr/abbr_view.php?m_temp1=1798","categories":[{"name":"KOREAN","slug":"KOREAN","permalink":"https://bny64.github.io/categories/KOREAN/"},{"name":"STUDY","slug":"KOREAN/STUDY","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/"},{"name":"NEW TECHNOLOGY","slug":"KOREAN/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/NEW-TECHNOLOGY/"}],"tags":[{"name":"RTSP, realtime streaming protocol","slug":"RTSP-realtime-streaming-protocol","permalink":"https://bny64.github.io/tags/RTSP-realtime-streaming-protocol/"}]},{"title":"ONVIF란?","slug":"ONVIF","date":"2020-11-15T06:44:51.000Z","updated":"2020-11-20T00:49:28.000Z","comments":true,"path":"2020/11/15/ONVIF/","link":"","permalink":"https://bny64.github.io/2020/11/15/ONVIF/","excerpt":"","text":"ONVIF(Open Network Video Interface Forum 오픈 네트워크 비디오 인터페이스 포럼[*], 온비프)는 세계 개방형 산업 포럼의 하나로서, 보안 목적의 물리적인 IP 기반 제품들의 인터페이스를 위한 세계 개방형 표준의 개발 및 이용을 용이하게 하는 것을 목적으로 한다. ONVIF는 동영상 감시 및 기타 물리적인 방범 지역 내의 IP 제품들이 어떻게 서로 통신할 수 있는지에 대한 표준을 만든다. ONVIF는 2008년 액시스 커뮤니케이션스, 보쉬 시큐리티 시스템스, 소니가 시작한 단체이다.간단히 말해 카메라를 제어할 때 사용되는 국제 표준 프로토콜이고 자세히 말하면 보안장비(CCTV, 카메라, 뷰어 등)에서 사용되는 표준 프로토콜이다. 프로파일프로파일 S비디오 및 오디오 스트리밍, PTZ 옵션, 릴레이 액티베이션 등의 IP 비디오 시스템의 공통 기능을 언급한다.프로파일 C도어 상태 및 제어, 자격 관리, 이벤트 관리 등의 IP 접근 통제 시스템의 공통 기능을 설명한다.프로파일 G비디오 스토리지, 녹화, 검색을 설명한다.프로파일 Q장치 발견, 구성, TLS 인증의 관리에 대해 설명한다.프로파일 A정보, 상태, 이벤트의 검색을 수행하고, 접근 규칙, 자격 정보, 스케줄 등의 PACS(물리 접근 제어 시스템) 관련 항목들을 구성하는 기능이다.프로파일 T(출시 후보/RC) H.264, H.265 인코딩 포맷, 이미징 설정, 알람 이벤트(모션, 부당 변경 감지 등) 등의 비디오 스트리밍 기능을 지원한다. 용도보안장비끼리 서로 연결되어 동작하게 해주는 프로토콜이다. 일반적으로 보안장비, 영상장비들은 다양한 프로토콜을 지원하고 있는데 자사 표준 프로토콜과 국제 표준 프로토콜(ONVIF)을 사용한다.국제 표준 프로토콜(ONVIF)의 경우 해당 장비에만 특화되어 있는 기능을 지원하지 않기 때문에 자사 표준 프로토콜을 사용하는 경우도 있다.ONVIF를 사용할 경우 전세계 공통적으로 사용하는 프로토콜이기 때문에 새로운 사양이나 변경되는 작업이 어렵고 오래 걸린다. 하지만 세계 표준이기 때문에 세계 어디서든 사용할 수 있다. 일반적으로 프로토콜은 socket 통신 기반 프로토콜과 HTTP기반 프로토콜이 있는데 ONVIF는 HTTP 프로토콜을 사용한다. 기능 프로토콜의 종류 영상, 음성, 이벤트 송수신 RTP/RTSP 프로토콜 제어, 설정, 조회 WSDL, SOAP 프로토콜 영상을 볼 때는 RTP/RTSP를 사용하고, IP를 변경하거나 설정을 변경하거나 할 때에는 WSDL, SOAP를 사용한다ONVIF 프로토콜이 RTP/RTSP 프로토콜을 구현한게 아니라 카메라와 같은 장비를 사용할 수 있도록 RTP/RTSP 주소를 알려주는 역할을 한다.","categories":[{"name":"KOREAN","slug":"KOREAN","permalink":"https://bny64.github.io/categories/KOREAN/"},{"name":"STUDY","slug":"KOREAN/STUDY","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/"},{"name":"NEW TECHNOLOGY","slug":"KOREAN/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/NEW-TECHNOLOGY/"}],"tags":[{"name":"ONVIF","slug":"ONVIF","permalink":"https://bny64.github.io/tags/ONVIF/"},{"name":"RTP","slug":"RTP","permalink":"https://bny64.github.io/tags/RTP/"},{"name":"RTSP","slug":"RTSP","permalink":"https://bny64.github.io/tags/RTSP/"},{"name":"ONVIF 개념","slug":"ONVIF-개념","permalink":"https://bny64.github.io/tags/ONVIF-%EA%B0%9C%EB%85%90/"},{"name":"ONVIF 뜻","slug":"ONVIF-뜻","permalink":"https://bny64.github.io/tags/ONVIF-%EB%9C%BB/"}]}],"categories":[{"name":"ENGLISH","slug":"ENGLISH","permalink":"https://bny64.github.io/categories/ENGLISH/"},{"name":"STUDY","slug":"ENGLISH/STUDY","permalink":"https://bny64.github.io/categories/ENGLISH/STUDY/"},{"name":"NEW TECHNOLOGY","slug":"ENGLISH/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/ENGLISH/STUDY/NEW-TECHNOLOGY/"},{"name":"JAPANESE","slug":"JAPANESE","permalink":"https://bny64.github.io/categories/JAPANESE/"},{"name":"STUDY","slug":"JAPANESE/STUDY","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/"},{"name":"BLOG","slug":"JAPANESE/STUDY/BLOG","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/BLOG/"},{"name":"NEW TECHNOLOGY","slug":"JAPANESE/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/JAPANESE/STUDY/NEW-TECHNOLOGY/"},{"name":"KOREAN","slug":"KOREAN","permalink":"https://bny64.github.io/categories/KOREAN/"},{"name":"STUDY","slug":"KOREAN/STUDY","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/"},{"name":"BLOG","slug":"KOREAN/STUDY/BLOG","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/BLOG/"},{"name":"NEW TECHNOLOGY","slug":"KOREAN/STUDY/NEW-TECHNOLOGY","permalink":"https://bny64.github.io/categories/KOREAN/STUDY/NEW-TECHNOLOGY/"}],"tags":[{"name":"RTSP, realtime streaming protocol","slug":"RTSP-realtime-streaming-protocol","permalink":"https://bny64.github.io/tags/RTSP-realtime-streaming-protocol/"},{"name":"ONVIF","slug":"ONVIF","permalink":"https://bny64.github.io/tags/ONVIF/"},{"name":"RTP","slug":"RTP","permalink":"https://bny64.github.io/tags/RTP/"},{"name":"RTSP","slug":"RTSP","permalink":"https://bny64.github.io/tags/RTSP/"},{"name":"seo","slug":"seo","permalink":"https://bny64.github.io/tags/seo/"},{"name":"SEO","slug":"SEO","permalink":"https://bny64.github.io/tags/SEO/"},{"name":"hexo","slug":"hexo","permalink":"https://bny64.github.io/tags/hexo/"},{"name":"検索エンジン最適化","slug":"検索エンジン最適化","permalink":"https://bny64.github.io/tags/%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E6%9C%80%E9%81%A9%E5%8C%96/"},{"name":"hexo検索エンジン最適化","slug":"hexo検索エンジン最適化","permalink":"https://bny64.github.io/tags/hexo%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E6%9C%80%E9%81%A9%E5%8C%96/"},{"name":"검색엔진최적화","slug":"검색엔진최적화","permalink":"https://bny64.github.io/tags/%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%B5%9C%EC%A0%81%ED%99%94/"},{"name":"hexo 검색엔진 최적화","slug":"hexo-검색엔진-최적화","permalink":"https://bny64.github.io/tags/hexo-%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84-%EC%B5%9C%EC%A0%81%ED%99%94/"},{"name":"ONVIF 개념","slug":"ONVIF-개념","permalink":"https://bny64.github.io/tags/ONVIF-%EA%B0%9C%EB%85%90/"},{"name":"ONVIF 뜻","slug":"ONVIF-뜻","permalink":"https://bny64.github.io/tags/ONVIF-%EB%9C%BB/"}]}